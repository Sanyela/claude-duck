name: Build and Push Docker Image (SPA)

on:
  push:
    tags:
      - 'v*'  # 当推送以 v 开头的标签时触发，例如 v1.0.0
  workflow_dispatch:  # 允许手动触发

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-unified:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for unified image
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Duck Code (SPA)
          org.opencontainers.image.description=Claude AI Proxy Service - Unified Frontend & Backend
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.licenses=Private
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.architecture=SPA

    - name: Build and push unified Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Image build summary
      run: |
        echo "✅ SPA统一镜像构建完成"
        echo "📦 镜像标签: ${{ steps.meta.outputs.tags }}"
        echo "🏗️  架构: SPA (前后端统一)"
        echo "🚀 部署: 使用 docker-compose.prod.yml 或 depoly.sh"
